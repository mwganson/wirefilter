# -*- coding: utf-8 -*-
__version__ = "0.2021.10.24"
#__version__ = "0.2021.10.24"
##WireFilter, 2021, by <TheMarkster> LGPL 2.1 or later
#import FreeCAD, FreeCADGui, Part, Draft
#class WireFilter:
#    def __init__(self, obj):
#        obj.addExtension("Part::AttachExtensionPython")
#        obj.addProperty("App::PropertyInteger","MaxWires","WireFilter","Maximum number of wires to use (prevents hanging on complex sources)").MaxWires = 25
#        obj.addProperty("App::PropertyLinkSub","Source","WireFilter","Source of the wires, typically a sketch or a compound of sketches")
#        obj.addProperty("App::PropertyIntegerList","WireOrder","WireOrder","Order of wires (0 = disable wire) Set Use Selected to False to enable this property.")
#        obj.addProperty("App::PropertyBool","ClaimChildren","WireFilter","Whether to claim children in tree view").ClaimChildren=True
#        obj.addProperty("App::PropertyEnumeration","FaceMaker","WireFilter","FaceMaker class to use to make face or No Face if no face")
#        obj.FaceMaker = ["No Face","Part::FaceMakerBullseye", "Part::FaceMakerCheese","Part::FaceMakerSimple","Part::FaceMakerExtrusion"]
#        obj.addProperty("App::PropertyFloat","Offset","Offsetting","2D offset in mm, < 0.0 = offset inwards, 0.0 = no offset, > 0.0 = offset outwards")
#        obj.addProperty("App::PropertyEnumeration","OffsetJoin","Offsetting","Join method -- Arcs, Tangent, Intersection")
#        obj.OffsetJoin = ["Arcs","Tangent","Intersection"]
#        obj.addProperty("App::PropertyBool","OffsetFill","Offsetting", "Whether to fill offset space (makes a face if true)").OffsetFill = False
#        obj.addProperty("App::PropertyBool","OffsetOpenResult","Offsetting","Whether to allow open result or to close result").OffsetOpenResult = False
#        obj.addProperty("App::PropertyBool","OffsetIntersection","Offsetting","Whether to offset child wires/faces independently or collectively").OffsetIntersection = False
#        obj.addProperty("App::PropertyVector","Scale","Scaling","Scale Factor: if 1,1,1, no scaling is done").Scale = FreeCAD.Vector(1,1,1)
#        obj.addProperty("App::PropertyString","Version","WireFilter","Version of WireFilter used to create this object.").Version = __version__
#        obj.addProperty("App::PropertyVector","Normal","WireFilter","Normal of Face1 or Wire1 if no face").Normal = FreeCAD.Vector(0,0,1)
#        obj.addProperty("App::PropertyBool","FollowSource","WireFilter","If False, source's placement is ignored.").FollowSource = True
#        obj.addProperty("App::PropertyBool","UseSelected","WireOrder","If True, use faces/edges/wires selected when object was first created (based on Source property)").UseSelected = True
#        obj.addProperty("App::PropertyBool","UseDefault","WireOrder","[Trigger] sets wire order to default [1,2,3,4...] and resets itself to False").UseDefault = False
#        obj.addProperty("App::PropertyStringList","SelectedEdges","SelectedEdges","Select some edges of this object and toggle SelectEdges trigger to True")
#        obj.addProperty("App::PropertyBool","SelectEdges","SelectedEdges","[Trigger] adds selected edges to Selected Edges property").SelectEdges = False
#        obj.addProperty("App::PropertyBool","UseSelectedEdges","SelectedEdges","If True, and if Selected Edges is populated, makes a wire from selected edges and uses that for this object's shape").UseSelectedEdges = False
#        obj.addProperty("App::PropertyBool","FixNormal","WireFilter","[Trigger] Fix Pad or Extrude's custom direction if it can't find the normal correctly.").FixNormal = False
#        obj.addProperty("App::PropertyFloat","UniformScale","Scaling","Scale the WireFilter uniformly.  Keeps it centered, too.").UniformScale = 1.0
#        obj.Proxy = self
#        self.fpName = obj.Name
#
#    def onChanged(self,fp,prop):
#        if prop == "WireOrder":
#            self.setWireOrder(fp)
#        elif prop == "UseDefault" and fp.UseDefault and hasattr(fp,"WireOrder"):
#            fp.UseSelected = False
#            fp.WireOrder = [] #will get set to defaults
#        elif prop == "UseSelected" and fp.UseSelected and hasattr(fp,"WireOrder"):
#            fp.setEditorMode("WireOrder",1)
#        elif prop == "UseSelected" and not fp.UseSelected and hasattr(fp,"WireOrder"):
#            fp.setEditorMode("WireOrder",0)
#        elif prop == "SelectEdges" and fp.SelectEdges:
#            fp.SelectEdges = False
#            self.selectEdges(fp)
#        elif prop == "FixNormal" and fp.FixNormal:
#            fp.FixNormal = False
#            self.fixNormal(fp)
#
#    def fixNormal(self,fp):
#        '''fixes a Pad or Extrude if it cannot find the correct normal direction for extruding'''
#        inlist = fp.InList
#        pads = [obj for obj in inlist if obj.TypeId == "PartDesign::Pad" and obj.Profile and obj.Profile[0] == fp]
#        if len(pads) != 0:
#            for pad in pads:
#                pad.UseCustomVector = True
#                pad.Direction = fp.Normal
#        extrudes = [obj for obj in inlist if obj.TypeId == "Part::Extrusion" and obj.Base and obj.Base == fp]
#        if len(extrudes) != 0:
#            for ext in extrudes:
#                ext.DirMode = "Custom"
#                ext.Dir = fp.Normal
#
#    def selectEdges(self,fp):
#        '''user will have selected some edges of this object in the 3D view and triggered this command'''
#        selx = FreeCADGui.Selection.getSelectionEx()
#        if not selx:
#            FreeCAD.Console.PrintError("Nothing selected, select some edges of this WireFilter object to make a wire from.\n")
#            return
#        if not selx[0].Object == fp or len(selx)>1:
#            FreeCAD.Console.PrintError("Select only edges from this object.\n")
#            return
#        edges = [sub for sub in selx[0].SubElementNames if "Edge" in sub]
#        fp.SelectedEdges = edges
#
#    #borrowed from Draft.Clone scaling code
#    def scale(self,fp,shp):
#        m = FreeCAD.Matrix()
#        if not shp.isNull():
#            sx,sy,sz = fp.Scale
#            if not fp.Scale.isEqual(FreeCAD.Vector(1, 1, 1),1e-7):
#                op = shp.Placement
#                shp.Placement = FreeCAD.Placement()
#                m.scale(fp.Scale)
#                if sx == sy == sz:
#                    shp.transformShape(m)
#                else:
#                    shp = shp.transformGeometry(m)
#                shp.Placement = op
#            if not fp.UniformScale == 1.0:
#                shp.scale(fp.UniformScale,shp.BoundBox.Center)
#        return shp
#
#    def offset(self,fp,shp):
#        if fp.Offset == 0.0:
#            return shp
#        mapped = {"Arcs":0,"Tangent":1,"Intersection":2}
#        join = mapped[fp.OffsetJoin]
#        return(shp.makeOffset2D(fp.Offset,join,fp.OffsetFill,fp.OffsetOpenResult,fp.OffsetIntersection))
#
#    def setWireOrder(self,fp):
#        '''user has adjusted WireOrder property.  Pad with 0's if some are missing'''
#        if fp.Source:
#            if len(fp.WireOrder) < len(fp.Source[0].Shape.Wires) and len(fp.WireOrder) != 0:
#                needed = len(fp.Source[0].Shape.Wires) - len(fp.WireOrder)
#                if needed != len(fp.Source[0].Shape.Wires):
#                    fp.WireOrder += [0] * needed
#                else:
#                    fp.WireOrder = []
#
#    def fixWireOrder(self,fp,shp):
#        '''if length of wires in shape has changed, reset wire order to default'''
#        if len(fp.WireOrder) != len(shp.Wires):
#            fp.WireOrder = range(1,len(shp.Wires)+1)
#            if hasattr(fp,"MaxWires") and len(fp.WireOrder) > fp.MaxWires:
#                fp.WireOrder = fp.WireOrder[:fp.MaxWires]
#
#    def isInWire(self,edge,wire):
#        '''return True if edge is in wire'''
#        edges = wire.Edges
#        for e in edges:
#            if e.isSame(edge) or e.isEqual(edge) or e.isPartner(edge):
#                return True
#        return False
#
#    def getWireDict(self,shape,maxWires):
#        '''returns a dictionary of form wire:[list of edge names]'''
#        edgenames = {}
#        wire_dict = {}
#        for ee in range (0,len(shape.Edges)):
#            edgenames[shape.Edges[ee]] = "Edge"+str(ee+1)
#        wire_count = len(shape.Wires)
#        if wire_count > maxWires:
#            wire_count = maxWires
#        for ww in range(0,wire_count):
#            wire_dict[ww+1] = []
#            for k,v in edgenames.items():
#                if self.isInWire(k, shape.Wires[ww]):
#                    wire_dict[ww+1] += [v]
#        return wire_dict
#
#    def executeUseSelectedEdges(self,fp,shp):
#        edges = [getattr(shp,edgename) for edgename in fp.SelectedEdges]
#        wire = Part.Wire(edges)
#        wire = self.offset(fp,wire)
#        wire = self.scale(fp,wire)
#        if fp.FaceMaker != "No Face":
#            face = Part.makeFace([wire],fp.FaceMaker)
#            return face
#        return wire
#
#    def wireIsPlanar(self, wire):
#        '''check if the wire is planar and return true/false'''
#        import DraftGeomUtils as dgu
#        return dgu.is_planar(wire)
#
#    def execute(self,fp):
#        if not fp.Source:
#            return
#        shape = fp.Source[0].Shape.copy()
#
#        if fp.FollowSource and not shape.isNull():
#            shape = shape.transformShape(shape.Placement.toMatrix(),True)
#
#        wire_count = len(shape.Wires)
#        if hasattr(fp,"MaxWires") and wire_count > fp.MaxWires:
#            wire_count = fp.MaxWires
#        if fp.Source[1] and fp.UseSelected:
#            faces = [name for name in fp.Source[1] if "Face" in name or "Wire" in name]
#            if len(faces) != 0:
#                shapes = [getattr(shape,f) for f in faces]
#                shape = Part.makeCompound(shapes)
#            else:
#                #handle edges
#                edges = [name for name in fp.Source[1] if "Edge" in name]
#                if len(edges) != 0:
#                    wire_dict = self.getWireDict(shape,fp.MaxWires)
#                    wire_order = [ww for ww in range(1,wire_count+1)]
#                    for k in range(1,wire_count+1):
#                        found = False
#                        for en in wire_dict[k]: #en = edge names in this wire
#                            for un in edges: #un = user name, edges user selected
#                                if en == un:
#                                    found = True
#                                    break
#                            if found:
#                                break
#                        if not found:
#                            wire_order[k-1] = 0
#                        else:
#                            wire_order[k-1] = k
#                    fp.WireOrder = wire_order
#        wires = shape.Wires
#        if hasattr(fp,"MaxWires") and len(wires) > fp.MaxWires:
#            wires = wires[:fp.MaxWires]
#            FreeCAD.Console.PrintWarning("MaxWires ("+str(fp.MaxWires)+") exceeded.  Source has "+str(len(shape.Wires))+" wires.  Set MaxWires property higher if you want to use all the wires.\n")
#        self.fixWireOrder(fp,shape)
#
#        reordered = [wires[ii-1] for ii in fp.WireOrder if ii != 0]
#        if len(reordered) == 0:
#            new_shape = Part.Shape()
#        elif len(reordered)==1:
#            new_shape = Part.makeCompound(reordered)
#        elif len(reordered)>1:
#            new_shape = reordered[0].fuse(reordered[1:])
#
#        if fp.FaceMaker != "No Face" and not fp.UseSelectedEdges:
#            face = Part.makeFace(new_shape,fp.FaceMaker)
#            new_shape = face
#
#        if not fp.UseSelectedEdges:
#            new_shape = self.offset(fp,new_shape)
#
#        if not fp.UseSelectedEdges:
#            new_shape = self.scale(fp,new_shape)
#
#        fp.positionBySupport()
#        if fp.FollowSource and not new_shape.isNull():
#            shape = new_shape.transformShape(shape.Placement.inverse().toMatrix(),True)
#        elif not fp.FollowSource and not new_shape.isNull():
#            shape = new_shape.transformShape(shape.Placement.inverse().toMatrix(),True)
#            shape.Placement = FreeCAD.Placement()
#
#        if hasattr(shape,"Face1"):
#            fp.Normal = shape.Face1.normalAt(0,0)
##            FreeCAD.Console.PrintMessage("Normal found at: "+str(fp.Normal)+"\n")
#        elif hasattr(shape,"Wire1") and self.wireIsPlanar(shape.Wire1) and shape.Wire1.isClosed():
#            fp.Normal = Part.makeFace(shape.Wire1,"Part::FaceMakerBullseye").normalAt(0,0)
##            FreeCAD.Console.PrintMessage("Normal found at: "+str(fp.Normal)+"\n")
#        else:
#            FreeCAD.Console.PrintWarning("Unable to find Normal of Wire1\n")
#
#        if fp.UseSelectedEdges and fp.SelectedEdges:
#            shape = self.executeUseSelectedEdges(fp, shape)
#
#        fp.Shape = shape
#
#class WireFilterVP:
#    def __init__(self, obj):
#        '''Set this object to the proxy object of the actual view provider'''
#        obj.Proxy = self
#
#    def attach(self,vobj):
#        self.vobj = vobj
#
#    def onDelete(self, vobj, subelements):
#        if vobj.Object.Source:
#            vobj.Object.Source[0].ViewObject.Visibility = True
#        return True
#
#    def updateData(self, fp, prop):
#        '''If a property of the handled feature has changed we have the chance to handle this here'''
#        pass
#
#    def getDisplayModes(self,obj):
#        '''Return a list of display modes.'''
#        modes=[]
#        modes.append("Flat Lines")
#        modes.append("Shaded")
#        modes.append("Wireframe")
#        return modes
#
#    def claimChildren(self):
#        fp = self.vobj.Object
#        if fp.Source and fp.ClaimChildren and not fp.Source[0].isDerivedFrom("PartDesign::Feature"):
#            return [fp.Source[0]]
#        else:
#            return[]
#
#    def getDefaultDisplayMode(self):
#        '''Return the name of the default display mode. It must be defined in getDisplayModes.'''
#        return "Flat Lines"
#
#    def setDisplayMode(self,mode):
#        '''Map the display mode defined in attach with those defined in getDisplayModes.\
#                Since they have the same names nothing needs to be done. This method is optional'''
#        return mode
#
#    def onChanged(self, vp, prop):
#        '''Here we can do something when a single property got changed'''
#        #FreeCAD.Console.PrintMessage("Change property: " + str(prop) + "\n")
#        pass
#
#    def getIcon(self):
#        '''Return the icon in XPM format which will appear in the tree view. This method is\
#                optional and if not defined a default icon is shown.'''
#        return """
#/* XPM */
#static char *a57ib_u2pr2[] = {
#/* columns rows colors chars-per-pixel */
#"64 64 158 2 ",
#"   c #AD0E0E",
#".  c #B30C0C",
#"X  c #BC0E0E",
#"o  c #AF1212",
#"O  c #AE1A1A",
#"+  c #B41212",
#"@  c #BB1212",
#"#  c #B41A1A",
#"$  c #B91C1C",
#"%  c #A92B2B",
#"&  c #B32525",
#"*  c #B82323",
#"=  c #B52C2C",
#"-  c #BB2C2C",
#";  c #B53030",
#":  c #BC3535",
#">  c #B53E3E",
#",  c #BB3C3C",
#"<  c #C51414",
#"1  c #CB1616",
#"2  c #C41B1B",
#"3  c #CD1A1A",
#"4  c #D41B1B",
#"5  c #DA1E1E",
#"6  c #C52525",
#"7  c #CB2323",
#"8  c #C72C2C",
#"9  c #CB2B2B",
#"0  c #D12222",
#"q  c #DD2121",
#"w  c #D12A2A",
#"e  c #C03535",
#"r  c #CC3333",
#"t  c #C23D3D",
#"y  c #CB3C3C",
#"u  c #D13333",
#"i  c #D03D3D",
#"p  c #E22424",
#"a  c #E12A2A",
#"s  c #935858",
#"d  c #AA4646",
#"f  c #A04B4B",
#"g  c #AA4D4D",
#"h  c #B54343",
#"j  c #BA4242",
#"k  c #B34E4E",
#"l  c #B94A4A",
#"z  c #AB5252",
#"x  c #A45D5D",
#"c  c #BD5656",
#"v  c #8C7373",
#"b  c #897979",
#"n  c #917272",
#"m  c #9E7B7B",
#"M  c #A76161",
#"N  c #BC6262",
#"B  c #AB7171",
#"V  c #B07878",
#"C  c #C54343",
#"Z  c #CB4343",
#"A  c #C44C4C",
#"S  c #CA4B4B",
#"D  c #D14646",
#"F  c #D04C4C",
#"G  c #C45454",
#"H  c #CC5454",
#"J  c #C65A5A",
#"K  c #CB5C5C",
#"L  c #D05353",
#"P  c #D05B5B",
#"I  c #D95D5D",
#"U  c #C66363",
#"Y  c #CB6464",
#"T  c #CD6B6B",
#"R  c #D16363",
#"E  c #D06A6A",
#"W  c #C37575",
#"Q  c #CE7373",
#"!  c #D27575",
#"~  c #D27B7B",
#"^  c #838383",
#"/  c #898989",
#"(  c #938484",
#")  c #969696",
#"_  c #9D9D9D",
#"`  c #A58585",
#"'  c #AC8080",
#"]  c #A38C8C",
#"[  c #AD8C8C",
#"{  c #B08585",
#"}  c #BF8282",
#"|  c #A09292",
#" . c #A89292",
#".. c #A29D9D",
#"X. c #AB9D9D",
#"o. c #B59797",
#"O. c #A5A4A4",
#"+. c #AAA6A6",
#"@. c #AAAAAA",
#"#. c #B6A3A3",
#"$. c #BBA3A3",
#"%. c #B1ADAD",
#"&. c #BFABAB",
#"*. c #B4B4B4",
#"=. c #BDB1B1",
#"-. c #BDBDBD",
#";. c #CF8E8E",
#":. c #D58484",
#">. c #D88787",
#",. c #D98C8C",
#"<. c #C59393",
#"1. c #D59393",
#"2. c #DA9494",
#"3. c #DC9C9C",
#"4. c #C8A7A7",
#"5. c #D7A7A7",
#"6. c #DEA3A3",
#"7. c #D0A9A9",
#"8. c #DEBCBC",
#"9. c #E0A6A6",
#"0. c #E1AAAA",
#"q. c #E2ACAC",
#"w. c #E2ADAD",
#"e. c #E3B0B0",
#"r. c #E5B4B4",
#"t. c #E7BBBB",
#"y. c #E8BFBF",
#"u. c #C2C2C2",
#"i. c #CDCDCD",
#"p. c #DEC3C3",
#"a. c #D9CCCC",
#"s. c #DFDBDB",
#"d. c #EBC4C4",
#"f. c #ECC9C9",
#"g. c #EDCBCB",
#"h. c #EED0D0",
#"j. c #E0D9D9",
#"k. c #EADBDB",
#"l. c #F0D5D5",
#"z. c #F0D7D7",
#"x. c #F2DADA",
#"c. c #F2DCDC",
#"v. c #F3DDDD",
#"b. c #E2E1E1",
#"n. c #E8E0E0",
#"m. c #EDEDED",
#"M. c #F4E0E0",
#"N. c #F5E3E3",
#"B. c #F7EBEB",
#"V. c #F8EBEB",
#"C. c #F9EFEF",
#"Z. c #F1F1F1",
#"A. c #FAF3F3",
#"S. c #FBF4F4",
#"D. c #FBF6F6",
#"F. c #FCF6F6",
#"G. c #FDF9F9",
#"H. c white",
#/* pixels */
#"H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.",
#"H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.G.A.V.M.c.z.h.h.g.g.g.g.h.h.z.c.M.V.A.G.H.H.H.H.H.H.H.H.H.H.H.H.H.H.",
#"H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.F.B.z.y.6.>.Q T Y K J J J Y T ~ ,.6.t.z.C.H.H.H.H.H.H.H.H.H.H.H.H.H.H.",
#"H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.S.B.x.d.0.>.T A : * # + . . + # * : A T >.9.g.M.V.F.G.H.H.H.H.H.H.H.H.H.H.",
#"H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.G.A.h.0.>.T H S i u w w 0 3 3 3 3 0 w w u y S H T :.q.h.B.H.H.H.H.H.H.H.H.H.H.",
#"H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.G.B.x.9.T t # X < 3 5 q p p p q p p p p q 4 3 < @ $ : Q 9.g.S.G.H.H.H.H.H.H.H.H.",
#"H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.C.M.e.~ K Z 9 3 1 1 < < < 7 9 9 r r r 9 3 2 < 1 1 3 3 9 Z J >.e.z.G.H.H.H.H.H.H.H.",
#"H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.M.d.Q & $ 1 4 p q 3 < X + & ; , j j , = O + @ < 3 5 q 5 < @ t T e.F.G.H.H.H.H.H.H.",
#"H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.A.M.0.T S 6 1 3 3 3 9 Z H E ~ >.2.3.3.3.3.2.>.~ E H y 9 3 1 1 3 8 C ! q.h.G.H.H.H.H.H.",
#"H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.G.M.g.Q # 2 q 4 4 2 # : T 3.d.M.C.F.F.F.S.S.S.A.c.d.3.Y , $ X 4 q 3 < t Y 0.A.H.H.H.H.H.",
#"H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.C.r.~ S 2 1 4 7 6 Z Y >.0.g.M.F.G.H.H.H.H.H.H.H.A.M.g.0.>.Y C 9 3 3 3 9 t ~ d.M.G.H.H.H.",
#"H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.G.c.:.= 6 4 4 1 6 : T r.c.V.S.G.H.H.H.H.H.H.H.H.H.H.G.S.C.z.0.~ t X 3 q 3 @ H 2.d.A.H.H.H.",
#"H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.F.x.r.Y # 3 5 3 2 C Q 6.x.F.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.A.z.q.Q t 9 4 1 1 y K 3.M.G.H.H.",
#"H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.C.r.:.S < 3 4 6 - T y.M.S.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.S.c.q.~ C X 1 q 6 & Q h.F.H.H.",
#"H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.M.2.G r 3 1 1 y J 3.M.G.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.F.z.q.Y $ 7 q 1 + J r.c.S.H.",
#"H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.z.Q - 7 q 1 X H 6.g.A.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.A.x.>., 9 4 3 < S ,.y.C.H.",
#"H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.G.A.d.K + 3 p 3 # Q g.B.G.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.A.0.T Z 1 1 1 y T 6.M.H.",
#"H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.A.x.0.H @ 3 q 9 : ,.M.F.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.F.g.3.H @ 1 4 r A >.c.H.",
#"H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.C.d.2.S < 1 4 y G 6.A.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.G.M.g.E . < q w - Q z.H.",
#"H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.M.r.:.Z < 1 3 S Q r.S.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.A.M.~ o 1 p 0 # Y h.H.",
#"H.H.S.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.k.5.Q y 1 1 2 H ;.8.m.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.Z.S.H.H.H.H.H.H.H.S.>.O 3 p 4 . J g.H.",
#"H.Z.i.*.*.*.*.*.*.*.*.*.*.*.*.*.%. .B , 1 < < k ` X.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.*.i.m.H.H.H.H.H.H.F.,.& 7 p 3 . G d.G.",
#"H.b.@.^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ n h 4 < @ f ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ O.b.H.H.H.H.H.H.F.2.; 9 p 1 . G y.A.",
#"H.b.@.^ ) O.O.O.O.O.O.O.O.O.O.O.O.O.[ A 5 4 7 N O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.) ^ O.b.H.H.H.H.H.H.S.1.= 6 p 3 . G d.F.",
#"G.b.+./ @.u.u.u.u.u.u.u.u.u.u.u.u.u.4.I p p a ! u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.@./ O.b.H.H.H.H.H.H.S.,.& 7 p 3 . G d.G.",
#"S.j.+./ @.u.*.O.O.O.O.O.O.O.O.O.O.O.[ A 5 5 q N O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.*.u.@./ O.b.H.H.H.H.H.G.C.>.O 3 p 4 + J g.H.",
#"S.j.O./ @.-.O.^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ n > 4 4 0 z ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ _ -.@./ O.b.H.H.H.H.H.F.M.~   < p 0 # U h.H.",
#"S.j.O./ @.-._ ^ ) @.*.*.*.*.*.*.@.X.' j < 3 0 > s m X.@.%.*.*.*.*.*.*.*.*.*.*.*.) ^ _ -.@./ O.b.H.H.H.H.G.M.d.T . < q w : Q z.H.",
#"S.j.O./ @.-._ ^ *.m.m.m.m.m.m.m.n.p.1.C X 1 q 6 % W p.k.m.m.m.m.m.m.m.m.m.m.m.m.-.^ _ -.@./ O.b.H.H.H.H.F.g.3.K @ 1 4 r A >.c.H.",
#"S.j.O./ @.-._ ^ -.G.H.H.H.H.H.H.S.M.r.J # 3 q 3 # Y r.x.F.H.H.H.H.H.H.H.H.H.H.H.u.^ _ -.@./ O.b.H.H.H.H.C.0.T Z 1 1 1 y T 6.M.H.",
#"S.j.O./ @.-._ ^ -.G.H.H.H.H.H.H.H.F.h.Q - 7 q 3 @ H 2.d.A.H.H.H.H.H.H.H.H.H.H.H.u.^ _ -.@./ O.b.H.H.H.G.M.>.: 9 5 1 X S ,.d.C.H.",
#"S.j.O./ @.-._ ^ -.G.H.H.H.H.H.H.H.H.M.2.G r 4 1 1 y Y 3.c.S.H.H.H.H.H.H.H.H.H.H.u.^ _ -.@./ O.b.H.H.S.x.r.Y # 3 q 3 # K q.x.S.H.",
#"S.j.O./ @.-._ ^ -.G.H.H.H.H.H.H.H.H.C.y.>.S X 1 5 6 - T t.c.F.H.H.H.H.H.H.H.H.H.u.^ _ -.@./ O.b.H.H.M.6.T y 2 3 5 6 - ~ h.A.G.H.",
#"S.j.O./ @.-._ ^ -.G.H.H.H.H.H.H.H.H.F.c.r.Y # 3 q 3 @ C >.r.x.C.G.H.H.H.H.H.H.H.u.^ _ -.@./ O.s.C.c.r.! t 9 3 3 3 r G 3.B.H.H.H.",
#"S.j.O./ @.-._ ^ -.G.H.H.H.H.H.H.H.H.H.A.z.>.C 8 3 3 3 9 t T 3.d.B.H.H.H.H.H.H.H.u.^ _ -.@./ ..a.g.2.Y C 6 0 5 1 @ H 3.d.A.H.H.H.",
#"S.j.O./ @.-._ ^ -.G.H.H.H.H.H.H.H.H.H.H.A.e.Q S 2 3 5 3 @ : Y 2.d.c.M.C.A.S.S.A.-.^ _ -.+.( ` 7.3.J - 2 1 4 q 6 & ~ g.V.G.H.H.H.",
#"S.j.O./ @.-._ ^ -.G.H.H.H.H.H.H.H.H.H.H.G.x.t.! e 6 3 3 3 7 y A T :.3.r.d.z.g.d.#.^ _ -.o.x g c A r 7 3 4 1 2 S ! q.M.F.H.H.H.H.",
#"S.j.O./ @.-._ ^ -.G.H.H.H.H.H.H.H.H.H.H.H.H.A.6.J t 2 3 q 4 1 @ $ : J ~ 2.0.3.2.{ b | =.} > # + X 1 4 4 4 2 & Q y.c.G.H.H.H.H.H.",
#"S.j.O./ @.-._ ^ -.G.H.H.H.H.H.H.H.H.H.H.H.H.G.z.q.~ A r 3 1 1 3 7 9 y S L P H A l d c Y H 9 3 1 1 1 1 2 8 H ~ q.c.C.H.H.H.H.H.H.",
#"S.j.O./ @.-._ ^ -.G.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.y.:.A # @ 3 5 p q 4 1 < X X X < 1 4 q q 5 5 p q 3 < * , >.h.B.H.H.H.H.H.H.H.H.",
#"S.j.O./ @.-._ ^ -.G.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.c.y.3.! H y 9 3 1 1 < < < < < 1 4 5 q 5 1 1 3 9 Z K ! 2.d.B.S.H.H.H.H.H.H.H.H.",
#"S.j.O./ @.-._ ^ -.G.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.G.M.g.3.Y , # . X < 1 1 4 4 4 5 q p 4 X + # , T 3.g.C.F.H.H.H.H.H.H.H.H.H.H.",
#"S.j.O./ @.-._ ^ -.G.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.F.B.g.0.,.! Y K H F D y r t h G R H : C T ,.q.g.M.G.H.H.H.H.H.H.H.H.H.H.H.",
#"S.j.O./ @.-._ ^ -.G.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.G.F.C.M.c.g.q.2.>.~ Y A M v ] &.<.U ~ d.V.A.S.G.H.H.H.H.H.H.H.H.H.H.H.H.",
#"S.j.O./ @.-._ ^ -.G.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.G.C.x.d.y.e.6.1.[ ^ _ -.$.V <.k.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.",
#"S.j.O./ @.-._ ^ -.G.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.G.S.A.C.V.M.M.=.^ _ -.@.( +.b.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.",
#"S.j.O./ @.-._ ^ -.G.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.u.^ _ -.@./ O.b.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.",
#"S.j.O./ @.-._ ^ -.G.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.u.^ _ -.@./ O.b.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.",
#"S.j.O./ @.-._ ^ -.G.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.u.^ _ -.@./ O.b.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.",
#"S.j.O./ @.-._ ^ -.G.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.u.^ _ -.@./ O.b.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.",
#"S.j.O./ @.-._ ^ -.G.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.u.^ _ -.@./ O.b.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.",
#"S.j.O./ @.-._ ^ -.G.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.u.^ _ -.@./ O.b.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.",
#"S.j.O./ @.-._ ^ -.G.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.u.^ _ -.@./ O.b.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.",
#"S.j.O./ @.-._ ^ -.G.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.u.^ _ -.@./ O.b.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.",
#"S.j.O./ @.-._ ^ -.S.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.G.-.^ _ -.@./ O.b.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.",
#"S.j.O./ @.-._ ^ _ -.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-._ ^ _ -.@./ O.b.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.",
#"S.j.O./ @.-._ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ _ -.@./ O.b.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.",
#"S.j.O./ @.u.@._ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ @.-.@./ O.b.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.",
#"S.j.O./ @.u.u.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.u.u.@./ O.b.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.",
#"G.j.+.^ ) @.@.@.@.@.@.@.@.@.@.@.@.@.@.@.@.@.@.@.@.@.@.@.@.@.@.@.@.@.@.@.@.@.@.@.@.@.@.@.) ^ O.b.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.",
#"H.b.@.^ ^ / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / ^ ^ O.b.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.",
#"H.m.u.@.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.+.@.@.u.m.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.",
#"H.G.m.b.j.j.j.j.j.j.j.j.j.j.j.j.j.j.j.j.j.j.j.j.j.j.j.j.j.j.j.j.j.j.j.j.j.j.j.j.j.j.j.j.b.b.m.G.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.",
#"H.H.H.H.G.S.A.A.A.A.A.A.A.A.A.A.A.A.A.A.A.A.A.A.A.A.A.A.A.A.A.A.A.A.A.A.A.A.A.A.A.A.S.G.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H.H."
#};

#            """
#
#    def __getstate__(self):
#        '''When saving the document this object gets stored using Python's json module.\
#                Since we have some un-serializable parts here -- the Coin stuff -- we must define this method\
#                to return a tuple of all serializable objects or None.'''
#        return None
#
#    def __setstate__(self,state):
#        '''When restoring the serialized object from document we have the chance to set some internals here.\
#                Since no data were serialized nothing needs to be done here.'''
#        return None



########################################
#CODE_ENDS_HERE

BASENAME = 'wirefilter'

def makeObject(WF):

    doc = FreeCAD.ActiveDocument
    selobj = FreeCADGui.Selection.getSelectionEx()
    #wf = doc.addObject("Part::Part2DObjectPython","WireFilter")
    wf = doc.addObject("Part::FeaturePython","WireFilter")
    WF.WireFilter(wf)
    WF.WireFilterVP(wf.ViewObject)

    if selobj:
        wf.Source = (selobj[0].Object,selobj[0].SubElementNames)
        selobj[0].Object.ViewObject.Visibility = False
        bodies = [obj for obj in doc.Objects if obj.isDerivedFrom("PartDesign::Body") and selobj[0].Object in obj.Group]
        if len(bodies) == 1:
            bodies[0].Group += [wf]
        else:
            parts = [obj for obj in doc.Objects if obj.TypeId == "App::Part" and selobj[0].Object in obj.Group]
            if len(parts) == 1:
                parts[0].Group += [wf]
    else:
        FreeCAD.Console.PrintError("No selection\n")



#################
def writeFile():
    with open(py_file,"w") as outfile:
        for line in code.splitlines():
            if "#CODE_ENDS_HERE" in line:
                break
            if line.startswith('#'):
                if line == "# -*- coding: utf-8 -*-":
                    line = "#" + line
                outfile.write(line[1:]+"\n") #skip first character (#)



############
#if __name__ == "__main__":
#    makeObject(None)
#    raise Exception("quick exit for testing/debugging")
############

if __name__ == "__main__":
    import os
    fin = open(__file__, 'r')
    code = fin.read()
    fin.close()
    version = code.splitlines()[1][16:]
    real_path = os.path.realpath(__file__)
    dir_path = os.path.dirname(real_path)
    py_file = real_path.replace(".FCMacro",".py").replace('WireFilter','wirefilter').replace('Wirefilter','wirefilter')
    bHasFile = os.path.exists(py_file)
    noImport = False #user elects not to save import file

    if not bHasFile:
        from PySide import QtGui
        window = QtGui.QApplication.activeWindow()
        mb = QtGui.QMessageBox()
        mb.setWindowTitle(BASENAME+" setup")
        mb.setIcon(mb.Information)
        mb.setStandardButtons(mb.Ok | mb.Cancel)
        mb.setDefaultButton(mb.Cancel)
        okBtn = mb.button(QtGui.QMessageBox.StandardButton.Ok)
        cancelBtn = mb.button(QtGui.QMessageBox.StandardButton.Cancel)
        okBtn.setText("Create file")
        cancelBtn.setText("Do not create file")
        caption = "In order for "+BASENAME+" objects to be parametric after saving and reloading file\n\
we need to create another file on this computer.  File to be created will be: \n\n"+py_file+"\n\n\
This makes it available to the system upon restarting FreeCAD and loading documents containing the \
"+BASENAME+" feature python objects.  Create file now?\n\n"
        mb.setText(caption)
        ret = mb.exec_()
        if ret == mb.Ok:
            writeFile()
            QtGui.QMessageBox.information(window,"Success","File successfully created.  Please note: if you uninstall "+BASENAME+" macro you need to manually remove "+py_file+", too.\n")
        else:
            new_lines = []
            for line in code.splitlines():
                if line.startswith('#'):
                    if "CODE_ENDS_HERE" in line:
                        break
                    if line == "# -*- coding: utf-8 -*-":
                        new_lines.append(line+"\n")
                        continue
                    new_lines.append(line[1:]+"\n")
            code = "".join(new_lines)

            #credit to Mila Nautikus for his answer to a question on stackoverflow, which I modified here
            #in this example the filename is pdwrapper.py
            #https://stackoverflow.com/questions/5362771/how-to-load-a-module-from-code-in-a-string

            ##########
            import sys, importlib
            my_name = 'wirefilter' #filename = wirefilter.py, so this must be 'wirefilter'
            my_spec = importlib.util.spec_from_loader(my_name, loader=None)

            wirefilter = importlib.util.module_from_spec(my_spec)

            exec(code, wirefilter.__dict__)
            sys.modules['wirefilter'] = wirefilter
            makeObject(wirefilter)
            noImport = True

    if not noImport: #don't never use no double negatives
        import addonmanager_utilities as utils
        import wirefilter as WF
        if WF.__version__ != __version__:
            writeFile()
            from PySide import QtCore,QtGui
            window = QtGui.QApplication.activeWindow()
            mbox = QtGui.QMessageBox()
            mbox.setWindowTitle(BASENAME+" updated")

            mbox.setText(BASENAME+".py has been updated to version "+__version__+". \
You must restart FreeCAD for the new changes to take effect and to use the macro.")
            mbox.setIcon(mbox.Warning)
            mbox.setStandardButtons(mbox.Ok | mbox.Cancel)
            mbox.setDefaultButton(mbox.Cancel)
            okBtn = mbox.button(QtGui.QMessageBox.StandardButton.Ok)
            cancelBtn = mbox.button(QtGui.QMessageBox.StandardButton.Cancel)
            okBtn.setText("Restart now")
            cancelBtn.setText("Restart later")
            ret = mbox.exec_()
            if ret == mbox.Ok:
                QtCore.QTimer.singleShot(1000, utils.restart_freecad)
        else:
            makeObject(WF)